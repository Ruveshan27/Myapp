Index: app/src/main/java/com/downloadshedding/naik/MyService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.downloadshedding.naik;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.app.DownloadManager;\r\nimport android.app.Notification;\r\nimport android.app.NotificationChannel;\r\nimport android.app.NotificationManager;\r\nimport android.app.PendingIntent;\r\nimport android.app.Service;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.net.Network;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Environment;\r\nimport android.os.Handler;\r\nimport android.os.IBinder;\r\nimport android.util.Log;\r\nimport android.util.SparseArray;\r\nimport android.widget.RadioGroup;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.Nullable;\r\nimport androidx.core.app.NotificationCompat;\r\n\r\nimport com.chaquo.python.PyObject;\r\nimport com.chaquo.python.Python;\r\nimport com.chaquo.python.android.AndroidPlatform;\r\n\r\nimport java.io.File;\r\n\r\nimport at.huber.youtubeExtractor.YouTubeUriExtractor;\r\nimport at.huber.youtubeExtractor.YtFile;\r\n\r\n\r\npublic class MyService extends Service{\r\n    Context context;\r\n    private Handler mHandler = new Handler();\r\n    public static final String SHARED_PREFS = \"sharedPrefs\";\r\n    public static final String URL = \"url\";\r\n    public static final String SETTINGS = \"settings\";\r\n\r\n    private String saved_url;\r\n    private int saved_settings;\r\n\r\n\r\n\r\n    @Override\r\n    public int onStartCommand(Intent intent, int flags, int startId) {\r\n        mHandler.postDelayed(runnable,0);\r\n        createNotificationChannel();\r\n\r\n        Intent intent1 = new Intent(this,MainActivity.class);\r\n\r\n        PendingIntent pendingIntent = PendingIntent.getActivity(this,0,intent1,0);\r\n\r\n        Notification notification = new NotificationCompat.Builder(this,\"ChannelID1\")\r\n                .setContentTitle(\"Downloadshedding\")\r\n                .setContentText(\"Is Running\")\r\n                .setContentIntent(pendingIntent).build();\r\n\r\n\r\n        startForeground(1,notification);\r\n\r\n        return START_STICKY;\r\n    }\r\n\r\n    private void createNotificationChannel()\r\n    {\r\n        if (Build.VERSION.SDK_INT>=Build.VERSION_CODES.O)\r\n        {\r\n            NotificationChannel notificationChannel = new NotificationChannel(\r\n                    \"ChannelID1\",\"Foreground notification\", NotificationManager.IMPORTANCE_DEFAULT);\r\n\r\n            NotificationManager manager = getSystemService(NotificationManager.class);\r\n            manager.createNotificationChannel(notificationChannel);\r\n        }\r\n    }\r\n\r\n    @Nullable\r\n    @Override\r\n    public IBinder onBind(Intent intent) {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public void onDestroy() {\r\n        stopForeground(true);\r\n        stopSelf();\r\n        super.onDestroy();\r\n    }\r\n\r\n    private Runnable runnable = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            try {\r\n\r\n                if (! Python.isStarted()) {\r\n                    Python.start(new AndroidPlatform(MyService.this));\r\n                }\r\n\r\n                Python py = Python.getInstance();\r\n                PyObject pyobj = py.getModule(\"myscript\");\r\n                PyObject obj = pyobj.callAttr(\"main\",\"https://youtube.com/playlist?list=PLch6H7qJEpXan7X07XgS_E2DdlTQxxRYE\");\r\n                PyObject obj2 = pyobj.callAttr(\"isLoadshedding\");\r\n                int count = 0;\r\n                //checking loadshedding\r\n                System.out.println(obj2.toString()+\"hhh\");\r\n\r\n                String[] links = obj.toString().split(\",\");\r\n                int linkLen = links.length;\r\n                links[0] = links[0].replace(\"[\", \"\");\r\n                links[linkLen - 1] = links[linkLen - 1].replace(\"]\", \"\");\r\n                System.out.println(\"Hello\");\r\n\r\n\r\n                for (int i = 0; i < links.length; i++) {\r\n                    System.out.println(links[i].replaceAll(\"'|'\", \"\").trim());\r\n                    if (links[i].contains(\"http\"))\r\n                        YTDownload(18,links[i].replaceAll(\"'|'\", \"\").trim());\r\n                    else {\r\n\r\n                    }\r\n                }\r\n            }catch (Exception e){\r\n\r\n            }\r\n            mHandler.postDelayed(this,60000);\r\n        }\r\n\r\n    };\r\n\r\n    public void YTDownload(final int itag,String youTubeURL) {\r\n        String VideoURLDownload = youTubeURL;\r\n        SharedPreferences sharedPreferences = getSharedPreferences(SHARED_PREFS,MODE_PRIVATE);\r\n        saved_url = sharedPreferences.getString(URL,\"\");\r\n        saved_settings = sharedPreferences.getInt(SETTINGS,0);\r\n        @SuppressLint(\"StaticFieldLeak\") YouTubeUriExtractor youTubeUriExtractor = new YouTubeUriExtractor(this) {\r\n            public void onUrisAvailable(String videoId, String videoTitle, SparseArray<YtFile> ytFiles) {\r\n                if ((ytFiles != null)) {\r\n                    String downloadURL = ytFiles.get(itag).getUrl();\r\n                    Log.e(\"Download URL: \", downloadURL);\r\n\r\n                    if (downloadURL != null) {\r\n                        DownloadManager downloadManager = (DownloadManager) getSystemService(DOWNLOAD_SERVICE);\r\n                        DownloadManager.Request request = new DownloadManager.Request(Uri.parse(downloadURL));\r\n                        request.setTitle(videoTitle);\r\n                        request.setDestinationInExternalPublicDir(Environment.DIRECTORY_DOWNLOADS, videoTitle + \".mp4\");\r\n\r\n                        switch (saved_settings) {\r\n                            case 0:\r\n                                request.setAllowedNetworkTypes(DownloadManager.Request.NETWORK_WIFI);\r\n                                System.out.println(\"0\");\r\n                            case 1:\r\n                                request.setAllowedNetworkTypes(DownloadManager.Request.NETWORK_MOBILE);\r\n                                System.out.println(\"1\");\r\n                            case 3:\r\n                                request.setAllowedNetworkTypes(DownloadManager.Request.NETWORK_MOBILE|DownloadManager.Request.NETWORK_WIFI);\r\n                                System.out.println(\"2\");\r\n                        }\r\n\r\n                        File applictionFile = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS).getAbsolutePath() + \"/\" + videoTitle + \".mp4\");\r\n\r\n                        if (applictionFile.exists()) {\r\n                        } else\r\n                        if (downloadManager != null) {\r\n                            downloadManager.enqueue(request);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        youTubeUriExtractor.execute(VideoURLDownload);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/downloadshedding/naik/MyService.java	(revision aefd8a4ee261047186701dec83b475c01343e57a)
+++ app/src/main/java/com/downloadshedding/naik/MyService.java	(date 1626341471621)
@@ -1,5 +1,4 @@
 package com.downloadshedding.naik;
-
 import android.annotation.SuppressLint;
 import android.app.DownloadManager;
 import android.app.Notification;
@@ -7,10 +6,8 @@
 import android.app.NotificationManager;
 import android.app.PendingIntent;
 import android.app.Service;
-import android.content.Context;
 import android.content.Intent;
 import android.content.SharedPreferences;
-import android.net.Network;
 import android.net.Uri;
 import android.os.Build;
 import android.os.Environment;
@@ -18,60 +15,53 @@
 import android.os.IBinder;
 import android.util.Log;
 import android.util.SparseArray;
-import android.widget.RadioGroup;
 import android.widget.TextView;
 
 import androidx.annotation.Nullable;
 import androidx.core.app.NotificationCompat;
-
 import com.chaquo.python.PyObject;
 import com.chaquo.python.Python;
 import com.chaquo.python.android.AndroidPlatform;
-
 import java.io.File;
-
 import at.huber.youtubeExtractor.YouTubeUriExtractor;
 import at.huber.youtubeExtractor.YtFile;
 
 
-public class MyService extends Service{
-    Context context;
+public class MyService extends Service {
     private Handler mHandler = new Handler();
     public static final String SHARED_PREFS = "sharedPrefs";
     public static final String URL = "url";
     public static final String SETTINGS = "settings";
+    public static final String LOADSHEDDING_STATUS ="notLoadShedding";
 
     private String saved_url;
     private int saved_settings;
 
 
-
     @Override
     public int onStartCommand(Intent intent, int flags, int startId) {
-        mHandler.postDelayed(runnable,0);
+        mHandler.postDelayed(runnable, 0);
         createNotificationChannel();
 
-        Intent intent1 = new Intent(this,MainActivity.class);
+        Intent intent1 = new Intent(this, MainActivity.class);
 
-        PendingIntent pendingIntent = PendingIntent.getActivity(this,0,intent1,0);
+        PendingIntent pendingIntent = PendingIntent.getActivity(this, 0, intent1, 0);
 
-        Notification notification = new NotificationCompat.Builder(this,"ChannelID1")
+        Notification notification = new NotificationCompat.Builder(this, "ChannelID1")
                 .setContentTitle("Downloadshedding")
                 .setContentText("Is Running")
                 .setContentIntent(pendingIntent).build();
 
 
-        startForeground(1,notification);
+        startForeground(1, notification);
 
         return START_STICKY;
     }
 
-    private void createNotificationChannel()
-    {
-        if (Build.VERSION.SDK_INT>=Build.VERSION_CODES.O)
-        {
+    private void createNotificationChannel() {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
             NotificationChannel notificationChannel = new NotificationChannel(
-                    "ChannelID1","Foreground notification", NotificationManager.IMPORTANCE_DEFAULT);
+                    "ChannelID1", "Foreground notification", NotificationManager.IMPORTANCE_DEFAULT);
 
             NotificationManager manager = getSystemService(NotificationManager.class);
             manager.createNotificationChannel(notificationChannel);
@@ -96,46 +86,59 @@
         public void run() {
             try {
 
-                if (! Python.isStarted()) {
+                if (!Python.isStarted()) {
                     Python.start(new AndroidPlatform(MyService.this));
                 }
+                SharedPreferences sharedPreferences = getSharedPreferences(SHARED_PREFS, MODE_PRIVATE);
+
+                saved_url = sharedPreferences.getString(URL, "");
+
+                MainActivity mainActivity = new MainActivity();
 
                 Python py = Python.getInstance();
                 PyObject pyobj = py.getModule("myscript");
-                PyObject obj = pyobj.callAttr("main","https://youtube.com/playlist?list=PLch6H7qJEpXan7X07XgS_E2DdlTQxxRYE");
+                PyObject obj = pyobj.callAttr("main", saved_url.trim());
                 PyObject obj2 = pyobj.callAttr("isLoadshedding");
                 int count = 0;
                 //checking loadshedding
-                System.out.println(obj2.toString()+"hhh");
+
+                String loadshedding = obj2.toString().replaceAll(" ", "");
+                if (loadshedding.equals(LOADSHEDDING_STATUS)) {
+                    System.err.println("yea");
+                } else {
 
-                String[] links = obj.toString().split(",");
-                int linkLen = links.length;
-                links[0] = links[0].replace("[", "");
-                links[linkLen - 1] = links[linkLen - 1].replace("]", "");
-                System.out.println("Hello");
+                    String[] links = obj.toString().split(",");
+                    int linkLen = links.length;
+                    links[0] = links[0].replace("[", "");
+                    links[linkLen - 1] = links[linkLen - 1].replace("]", "");
+                    System.out.println("Hello");
 
 
-                for (int i = 0; i < links.length; i++) {
-                    System.out.println(links[i].replaceAll("'|'", "").trim());
-                    if (links[i].contains("http"))
-                        YTDownload(18,links[i].replaceAll("'|'", "").trim());
-                    else {
+                    for (int i = 0; i < links.length; i++) {
+                        System.out.println(links[i].replaceAll("'|'", "").trim());
+                        if (links[i].contains("http"))
+                            YTDownload(18, links[i].replaceAll("'|'", "").trim());
+                        else {
 
+                        }
                     }
                 }
-            }catch (Exception e){
+
+
+            } catch (Exception e) {
 
             }
-            mHandler.postDelayed(this,60000);
+            mHandler.postDelayed(this, 60000);
+
+
         }
 
     };
 
-    public void YTDownload(final int itag,String youTubeURL) {
+    public void YTDownload(final int itag, String youTubeURL) {
         String VideoURLDownload = youTubeURL;
-        SharedPreferences sharedPreferences = getSharedPreferences(SHARED_PREFS,MODE_PRIVATE);
-        saved_url = sharedPreferences.getString(URL,"");
-        saved_settings = sharedPreferences.getInt(SETTINGS,0);
+        SharedPreferences sharedPreferences = getSharedPreferences(SHARED_PREFS, MODE_PRIVATE);
+        saved_settings = sharedPreferences.getInt(SETTINGS, 0);
         @SuppressLint("StaticFieldLeak") YouTubeUriExtractor youTubeUriExtractor = new YouTubeUriExtractor(this) {
             public void onUrisAvailable(String videoId, String videoTitle, SparseArray<YtFile> ytFiles) {
                 if ((ytFiles != null)) {
@@ -148,23 +151,24 @@
                         request.setTitle(videoTitle);
                         request.setDestinationInExternalPublicDir(Environment.DIRECTORY_DOWNLOADS, videoTitle + ".mp4");
 
-                        switch (saved_settings) {
-                            case 0:
-                                request.setAllowedNetworkTypes(DownloadManager.Request.NETWORK_WIFI);
-                                System.out.println("0");
-                            case 1:
-                                request.setAllowedNetworkTypes(DownloadManager.Request.NETWORK_MOBILE);
-                                System.out.println("1");
-                            case 3:
-                                request.setAllowedNetworkTypes(DownloadManager.Request.NETWORK_MOBILE|DownloadManager.Request.NETWORK_WIFI);
-                                System.out.println("2");
+                        if (saved_settings == 0) { //wifi only
+                            request.setAllowedNetworkTypes(DownloadManager.Request.NETWORK_WIFI);
+                        }
+
+                        if (saved_settings == 1) { //data only
+                            request.setAllowedNetworkTypes(DownloadManager.Request.NETWORK_MOBILE);
+                            System.out.println("1");
+                        }
+                        if (saved_settings == 2) { //wifi or data
+                            request.setAllowedNetworkTypes(DownloadManager.Request.NETWORK_MOBILE | DownloadManager.Request.NETWORK_WIFI);
+                            System.out.println("2");
                         }
 
+
                         File applictionFile = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS).getAbsolutePath() + "/" + videoTitle + ".mp4");
 
                         if (applictionFile.exists()) {
-                        } else
-                        if (downloadManager != null) {
+                        } else if (downloadManager != null) {
                             downloadManager.enqueue(request);
                         }
                     }
@@ -174,3 +178,4 @@
         youTubeUriExtractor.execute(VideoURLDownload);
     }
 }
+
Index: app/src/main/java/com/downloadshedding/naik/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.downloadshedding.naik;\r\n\r\nimport androidx.appcompat.app.ActionBar;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.RadioButton;\r\nimport android.widget.RadioGroup;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport com.chaquo.python.PyObject;\r\nimport com.chaquo.python.Python;\r\nimport com.chaquo.python.android.AndroidPlatform;\r\n\r\npublic class MainActivity extends AppCompatActivity {\r\n\r\n    public static final String SHARED_PREFS = \"sharedPrefs\";\r\n    public static final String URL = \"url\";\r\n    public static final String SETTINGS = \"settings\";\r\n\r\n    private String saved_url;\r\n    private int saved_settings;\r\n\r\n\r\n\r\n    @Override\r\n\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        loadData();\r\n\r\n        ActionBar actionBar = getSupportActionBar();\r\n        actionBar.hide();\r\n\r\n        Button save_playlist = findViewById(R.id.savePlaylist);\r\n        Button start_app = findViewById(R.id.startApp);\r\n\r\n\r\n        Intent intent = new Intent(this, MyService.class);\r\n        TextView countVids = findViewById(R.id.playlistCounter);\r\n        TextView settings_TextView = findViewById(R.id.settings);\r\n        TextView download_Settings = findViewById(R.id.download_Settings);\r\n        RadioGroup downSettings = findViewById(R.id.radio_group);\r\n\r\n        final int[] count = {2};\r\n        Button save_Settings = findViewById(R.id.saveSettigs);\r\n\r\n        save_Settings.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                saveSettings();\r\n\r\n            }\r\n        });\r\n\r\n\r\n\r\n        settings_TextView.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n\r\n\r\n\r\n                if (count[0] %2==0){\r\n                    download_Settings.setVisibility(View.VISIBLE);\r\n                    downSettings.setVisibility(View.VISIBLE);\r\n                    save_Settings.setVisibility(View.VISIBLE);\r\n                    settings_TextView.setText(\"Close Settings\");\r\n\r\n\r\n                    count[0]++;\r\n\r\n\r\n                }else {\r\n                    download_Settings.setVisibility(View.GONE);\r\n                    downSettings.setVisibility(View.GONE);\r\n                    save_Settings.setVisibility(View.GONE);\r\n                    settings_TextView.setText(\"Settings\");\r\n                    count[0]++;\r\n\r\n                }\r\n\r\n\r\n\r\n            }\r\n\r\n        });\r\n\r\n\r\n        save_playlist.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                EditText enter_playlist = findViewById(R.id.input);\r\n                String user_url = enter_playlist.getText().toString().trim();\r\n                if (user_url.isEmpty()==true){\r\n                    Toast.makeText(MainActivity.this,\"Enter valid URL\",Toast.LENGTH_LONG).show();\r\n\r\n                }else {\r\n                    saveData();\r\n                    countVids.setText(\"Videos currently in playlist: \" + countVids());\r\n                    start_app.setVisibility(View.VISIBLE);\r\n                }\r\n\r\n            }\r\n        });\r\n        start_app.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n\r\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n                    startForegroundService(intent);\r\n\r\n                } else {\r\n                    startService(intent);\r\n\r\n                }\r\n\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    public String countVids() {\r\n        if (! Python.isStarted()) {\r\n            Python.start(new AndroidPlatform(this));\r\n        }\r\n        Python py = Python.getInstance();\r\n        PyObject pyobj = py.getModule(\"myscript\");\r\n        PyObject obj = pyobj.callAttr(\"countVids\", \"https://youtube.com/playlist?list=PLch6H7qJEpXan7X07XgS_E2DdlTQxxRYE\");\r\n        return obj.toString();\r\n    }\r\n    public void saveData(){\r\n        SharedPreferences sharedPreferences = getSharedPreferences(SHARED_PREFS,MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = sharedPreferences.edit();\r\n        EditText userLink = findViewById(R.id.input);\r\n        editor.putString(URL,userLink.getText().toString());\r\n        editor.apply();\r\n        Toast.makeText(this,\"New link has been saved\",Toast.LENGTH_SHORT).show();\r\n    }\r\n    public void loadData(){\r\n        SharedPreferences sharedPreferences = getSharedPreferences(SHARED_PREFS,MODE_PRIVATE);\r\n        saved_url = sharedPreferences.getString(URL,\"\");\r\n        saved_settings = sharedPreferences.getInt(SETTINGS,0);\r\n        EditText userLink = findViewById(R.id.input);\r\n        RadioGroup downSettings = findViewById(R.id.radio_group);\r\n        userLink.setText(saved_url.toString());\r\n        downSettings.check(downSettings.getChildAt(saved_settings).getId());\r\n\r\n\r\n\r\n    }\r\n    public void saveSettings(){\r\n        SharedPreferences sharedPreferences = getSharedPreferences(SHARED_PREFS,MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = sharedPreferences.edit();\r\n        RadioGroup downSettings = findViewById(R.id.radio_group);\r\n        int index = downSettings.indexOfChild(findViewById(downSettings.getCheckedRadioButtonId()));\r\n        editor.putInt(SETTINGS,index);\r\n        editor.apply();\r\n        Toast.makeText(this,\"New settings saved\",Toast.LENGTH_SHORT).show();\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/downloadshedding/naik/MainActivity.java	(revision aefd8a4ee261047186701dec83b475c01343e57a)
+++ app/src/main/java/com/downloadshedding/naik/MainActivity.java	(date 1626342196165)
@@ -9,7 +9,6 @@
 import android.view.View;
 import android.widget.Button;
 import android.widget.EditText;
-import android.widget.RadioButton;
 import android.widget.RadioGroup;
 import android.widget.TextView;
 import android.widget.Toast;
@@ -23,18 +22,18 @@
     public static final String SHARED_PREFS = "sharedPrefs";
     public static final String URL = "url";
     public static final String SETTINGS = "settings";
+    public static final String LOADSHEDDING_STATUS ="notLoadShedding";
 
     private String saved_url;
     private int saved_settings;
 
-
-
     @Override
 
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_main);
         loadData();
+        loadshedding_Status();
 
         ActionBar actionBar = getSupportActionBar();
         actionBar.hide();
@@ -52,6 +51,8 @@
         final int[] count = {2};
         Button save_Settings = findViewById(R.id.saveSettigs);
 
+
+
         save_Settings.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
@@ -127,15 +128,7 @@
 
     }
 
-    public String countVids() {
-        if (! Python.isStarted()) {
-            Python.start(new AndroidPlatform(this));
-        }
-        Python py = Python.getInstance();
-        PyObject pyobj = py.getModule("myscript");
-        PyObject obj = pyobj.callAttr("countVids", "https://youtube.com/playlist?list=PLch6H7qJEpXan7X07XgS_E2DdlTQxxRYE");
-        return obj.toString();
-    }
+
     public void saveData(){
         SharedPreferences sharedPreferences = getSharedPreferences(SHARED_PREFS,MODE_PRIVATE);
         SharedPreferences.Editor editor = sharedPreferences.edit();
@@ -150,9 +143,18 @@
         saved_settings = sharedPreferences.getInt(SETTINGS,0);
         EditText userLink = findViewById(R.id.input);
         RadioGroup downSettings = findViewById(R.id.radio_group);
+        TextView countVids = findViewById(R.id.playlistCounter);
         userLink.setText(saved_url.toString());
         downSettings.check(downSettings.getChildAt(saved_settings).getId());
 
+        if(saved_url.isEmpty()==false)
+        {
+            Button start_app = findViewById(R.id.startApp);
+            start_app.setVisibility(View.VISIBLE);
+            countVids.setText("Videos currently in playlist: " + countVids());
+
+        }
+
 
 
     }
@@ -166,4 +168,31 @@
         Toast.makeText(this,"New settings saved",Toast.LENGTH_SHORT).show();
 
     }
-}
+    public String countVids() {
+        if (! Python.isStarted()) {
+            Python.start(new AndroidPlatform(this));
+        }
+        SharedPreferences sharedPreferences = getSharedPreferences(SHARED_PREFS,MODE_PRIVATE);
+        saved_url = sharedPreferences.getString(URL,"");
+        Python py = Python.getInstance();
+        PyObject pyobj = py.getModule("myscript");
+        PyObject obj = pyobj.callAttr("countVids",saved_url.trim());
+        return obj.toString();
+    }
+    public void loadshedding_Status()
+    {
+        Python py = Python.getInstance();
+        PyObject pyobj = py.getModule("myscript");
+        PyObject obj2 = pyobj.callAttr("isLoadshedding");
+        String loadshedding = obj2.toString().replaceAll(" ", "");
+        TextView loadshedding_textview = findViewById(R.id.loadshedding);
+        if (loadshedding.equals(LOADSHEDDING_STATUS)) {
+            loadshedding_textview.setText("Not Loadshedding");
+        } else {
+            loadshedding_textview.setText("Loadshedding");
+        }
+
+        }
+
+    }
+
Index: .idea/inspectionProfiles/Project_Default.xml
===================================================================
--- .idea/inspectionProfiles/Project_Default.xml	(date 1624795730918)
+++ .idea/inspectionProfiles/Project_Default.xml	(date 1624795730918)
@@ -0,0 +1,10 @@
+<component name="InspectionProjectProfileManager">
+  <profile version="1.0">
+    <option name="myName" value="Project Default" />
+    <inspection_tool class="ConstantConditions" enabled="true" level="WARNING" enabled_by_default="true">
+      <option name="SUGGEST_NULLABLE_ANNOTATIONS" value="false" />
+      <option name="DONT_REPORT_TRUE_ASSERT_STATEMENTS" value="false" />
+    </inspection_tool>
+    <inspection_tool class="PyInterpreterInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+  </profile>
+</component>
\ No newline at end of file
Index: .idea/vcs.xml
===================================================================
--- .idea/vcs.xml	(date 1626250011164)
+++ .idea/vcs.xml	(date 1626250011164)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: gradle/wrapper/gradle-wrapper.properties
===================================================================
--- gradle/wrapper/gradle-wrapper.properties	(date 1624792916760)
+++ gradle/wrapper/gradle-wrapper.properties	(date 1624792916760)
@@ -0,0 +1,6 @@
+#Sun Jun 27 13:21:56 CAT 2021
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-6.5-all.zip
Index: gradle.properties
===================================================================
--- gradle.properties	(date 1624792379512)
+++ gradle.properties	(date 1624792379512)
@@ -0,0 +1,19 @@
+# Project-wide Gradle settings.
+# IDE (e.g. Android Studio) users:
+# Gradle settings configured through the IDE *will override*
+# any settings specified in this file.
+# For more details on how to configure your build environment visit
+# http://www.gradle.org/docs/current/userguide/build_environment.html
+# Specifies the JVM arguments used for the daemon process.
+# The setting is particularly useful for tweaking memory settings.
+org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
+# When configured, Gradle will run in incubating parallel mode.
+# This option should only be used with decoupled projects. More details, visit
+# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
+# org.gradle.parallel=true
+# AndroidX package structure to make it clearer which packages are bundled with the
+# Android operating system, and which are packaged with your app"s APK
+# https://developer.android.com/topic/libraries/support-library/androidx-rn
+android.useAndroidX=true
+# Automatically convert third-party libraries to use AndroidX
+android.enableJetifier=true
\ No newline at end of file
Index: build.gradle
===================================================================
--- build.gradle	(date 1625644364127)
+++ build.gradle	(date 1625644364127)
@@ -0,0 +1,27 @@
+// Top-level build file where you can add configuration options common to all sub-projects/modules.
+buildscript {
+    repositories {
+        google()
+        jcenter()
+        maven { url "https://chaquo.com/maven" }
+    }
+    dependencies {
+        classpath 'com.android.tools.build:gradle:4.1.0'
+        classpath "com.chaquo.python:gradle:9.1.0"
+
+        // NOTE: Do not place your application dependencies here; they belong
+        // in the individual module build.gradle files
+    }
+}
+
+allprojects {
+    repositories {
+        google()
+        jcenter()
+        maven { url "https://jitpack.io" }
+    }
+}
+
+task clean(type: Delete) {
+    delete rootProject.buildDir
+}
\ No newline at end of file
Index: .idea/gradle.xml
===================================================================
--- .idea/gradle.xml	(date 1624794641570)
+++ .idea/gradle.xml	(date 1624794641570)
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="GradleMigrationSettings" migrationVersion="1" />
+  <component name="GradleSettings">
+    <option name="linkedExternalProjectsSettings">
+      <GradleProjectSettings>
+        <option name="testRunner" value="PLATFORM" />
+        <option name="distributionType" value="DEFAULT_WRAPPED" />
+        <option name="externalProjectPath" value="$PROJECT_DIR$" />
+        <option name="gradleJvm" value="1.8" />
+        <option name="modules">
+          <set>
+            <option value="$PROJECT_DIR$" />
+            <option value="$PROJECT_DIR$/app" />
+          </set>
+        </option>
+        <option name="resolveModulePerSourceSet" value="false" />
+        <option name="useQualifiedModuleNames" value="true" />
+      </GradleProjectSettings>
+    </option>
+  </component>
+</project>
\ No newline at end of file
Index: settings.gradle
===================================================================
--- settings.gradle	(date 1624792380153)
+++ settings.gradle	(date 1624792380153)
@@ -0,0 +1,2 @@
+include ':app'
+rootProject.name = "DownLoadShedding"
\ No newline at end of file
Index: .idea/misc.xml
===================================================================
--- .idea/misc.xml	(date 1624792465564)
+++ .idea/misc.xml	(date 1624792465564)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" default="true" project-jdk-name="1.8" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/build/classes" />
+  </component>
+  <component name="ProjectType">
+    <option name="id" value="Android" />
+  </component>
+</project>
\ No newline at end of file
Index: .gitignore
===================================================================
--- .gitignore	(date 1624792379231)
+++ .gitignore	(date 1624792379231)
@@ -0,0 +1,15 @@
+*.iml
+.gradle
+/local.properties
+/.idea/caches
+/.idea/libraries
+/.idea/modules.xml
+/.idea/workspace.xml
+/.idea/navEditor.xml
+/.idea/assetWizardSettings.xml
+.DS_Store
+/build
+/captures
+.externalNativeBuild
+.cxx
+local.properties
Index: .idea/compiler.xml
===================================================================
--- .idea/compiler.xml	(date 1624792465580)
+++ .idea/compiler.xml	(date 1624792465580)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <bytecodeTargetLevel target="1.8" />
+  </component>
+</project>
\ No newline at end of file
Index: gradlew.bat
===================================================================
--- gradlew.bat	(date 1624792379325)
+++ gradlew.bat	(date 1624792379325)
@@ -0,0 +1,84 @@
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windows variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
Index: .idea/.gitignore
===================================================================
--- .idea/.gitignore	(date 1624792465658)
+++ .idea/.gitignore	(date 1624792465658)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: .idea/jarRepositories.xml
===================================================================
--- .idea/jarRepositories.xml	(date 1625644371390)
+++ .idea/jarRepositories.xml	(date 1625644371390)
@@ -0,0 +1,30 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="RemoteRepositoriesConfiguration">
+    <remote-repository>
+      <option name="id" value="central" />
+      <option name="name" value="Maven Central repository" />
+      <option name="url" value="https://repo1.maven.org/maven2" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="jboss.community" />
+      <option name="name" value="JBoss Community repository" />
+      <option name="url" value="https://repository.jboss.org/nexus/content/repositories/public/" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="BintrayJCenter" />
+      <option name="name" value="BintrayJCenter" />
+      <option name="url" value="https://jcenter.bintray.com/" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="Google" />
+      <option name="name" value="Google" />
+      <option name="url" value="https://dl.google.com/dl/android/maven2/" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="maven" />
+      <option name="name" value="maven" />
+      <option name="url" value="https://jitpack.io" />
+    </remote-repository>
+  </component>
+</project>
\ No newline at end of file
